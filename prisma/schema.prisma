generator client {
  provider = "prisma-client-js"
  output   = "../prisma/client"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Base model for users
model User {
  id            String        @id @default(cuid())
  discordId     String        @unique
  username      String
  walletAddress String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // Relations
  adventures    Adventure[]
  characters    Character[]
  friends       Friendship[]  @relation("UserFriends")
  friendOf      Friendship[]  @relation("FriendOf")
}

// Character model
model Character {
  id          String            @id @default(cuid())
  name        String
  class       String
  race        String
  level       Int               @default(1)
  experience  Int               @default(0)
  
  // Base Stats
  strength     Int              @default(10)
  dexterity    Int              @default(10)
  constitution Int              @default(10)
  intelligence Int              @default(10)
  wisdom       Int              @default(10)
  charisma     Int              @default(10)
  
  // Derived Stats
  health      Int               @default(100)
  maxHealth   Int               @default(100)
  mana        Int               @default(100)
  maxMana     Int               @default(100)
  armorClass  Int               @default(10)
  initiative  Int               @default(0)
  speed       Int               @default(30)
  
  // Equipment and Skills
  proficiencies String[]        @default([])
  languages    String[]         @default([])
  
  // Background
  background  String?           @db.Text
  appearance  String?           @db.Text
  personality String?           @db.Text
  alignment   String?
  
  // Metadata
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  user        User              @relation(fields: [userId], references: [id])
  adventures  AdventurePlayer[]
  inventory   InventoryItem[]
  spells      Spell[]
  abilities   Ability[]
}

// Adventure model
model Adventure {
  id            String            @id @default(cuid())
  name          String
  status        String            // ACTIVE, PAUSED, FINISHED
  language      String            @default("en-US")
  voiceType     String            @default("discord") // "discord" or "elevenlabs"
  privacy       String            @default("public")  // "public", "friends_only", "private"
  worldStyle    String            @default("high_fantasy") // high_fantasy, dark_fantasy, steampunk, etc
  toneStyle     String            @default("heroic") // heroic, gritty, humorous, etc
  magicLevel    String            @default("high") // high, low, none
  setting       String?           @db.Text // Custom world setting description
  userId        String
  textChannelId String?
  categoryId    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  // Relations
  user          User              @relation(fields: [userId], references: [id])
  players       AdventurePlayer[]
  scenes        Scene[]
  inventory     InventoryItem[]
}

// Joining table for adventures and characters
model AdventurePlayer {
  id          String    @id @default(cuid())
  adventureId String
  characterId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relations
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  character   Character @relation(fields: [characterId], references: [id])

  @@unique([adventureId, characterId])
}

// Scene model for adventure progress
model Scene {
  id          String    @id @default(cuid())
  name        String
  description String
  adventureId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relations
  adventure   Adventure @relation(fields: [adventureId], references: [id])
}

// Inventory items
model InventoryItem {
  id          String     @id @default(cuid())
  name        String
  type        String     // WEAPON, ARMOR, POTION, etc.
  description String
  adventureId String
  characterId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Relations
  adventure   Adventure  @relation(fields: [adventureId], references: [id])
  character   Character? @relation(fields: [characterId], references: [id])
}

// Friendship system
model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

// Spell model
model Spell {
    id          String    @id @default(cuid())
    name        String
    level       Int       // 0 for cantrips
    school      String    // e.g., Evocation, Abjuration, etc.
    description String    @db.Text
    castingTime String
    range       String
    duration    String
    components  String[]
    characterId String
    character   Character @relation(fields: [characterId], references: [id])
}

// Ability model
model Ability {
    id          String    @id @default(cuid())
    name        String
    type        String    // class feature, racial trait, etc.
    description String    @db.Text
    uses        Int?      // null for unlimited uses
    recharge    String?   // e.g., "short rest", "long rest"
    characterId String
    character   Character @relation(fields: [characterId], references: [id])
} 