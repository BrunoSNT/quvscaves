// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(uuid())
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  username               String
  discordId              String            @unique
  nickname               String?
  walletAddress          String?
  language               String            @default("en-US")
  characters             Character[]
  adventures             Adventure[]
  friendRequestsSent     Friendship[]      @relation("FriendRequestsSent")
  friendRequestsReceived Friendship[]      @relation("FriendRequestsReceived")
  wallet                 Wallet?
  adventurePlayers       AdventurePlayer[]

  @@map("users")
}

model Character {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  class            String
  race             String
  level            Int                @default(1)
  experience       Int                @default(0)
  health           Int                @default(100)
  maxHealth        Int                @default(100)
  mana             Int                @default(100)
  maxMana          Int                @default(100)
  stats            Json               @default("{}")
  skills           Json               @default("{}")
  inventory        Json               @default("[]")
  effects          Json               @default("[]")
  proficiencies    Json               @default("[]")
  languages        Json               @default("[]")
  spells           Json               @default("[]")
  abilities        Json               @default("[]")
  background       String?
  strength         Int                @default(10)
  dexterity        Int                @default(10)
  constitution     Int                @default(10)
  intelligence     Int                @default(10)
  wisdom           Int                @default(10)
  charisma         Int                @default(10)
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  adventures       AdventurePlayer[]
  CharacterSpell   CharacterSpell[]
  CharacterAbility CharacterAbility[]

  @@map("characters")
}

model CharacterSpell {
  id          String    @id @default(uuid())
  name        String
  level       Int       @default(0)
  school      String
  description String    @db.Text
  characterId String
  character   Character @relation(fields: [characterId], references: [id])

  @@map("character_spells")
}

model CharacterAbility {
  id          String    @id @default(uuid())
  name        String
  type        String
  description String    @db.Text
  uses        Int?
  recharge    String?
  characterId String
  character   Character @relation(fields: [characterId], references: [id])

  @@map("character_abilities")
}

model Adventure {
  id            String            @id @default(uuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String
  description   String?
  status        String            @default("ACTIVE")
  language      String            @default("en-US")
  voiceType     String            @default("NONE")
  privacy       String            @default("public")
  worldStyle    String            @default("FANTASY")
  toneStyle     String            @default("CASUAL")
  magicLevel    String            @default("MEDIUM")
  categoryId    String?
  textChannelId String?
  settings      Json              @default("{}")
  players       AdventurePlayer[]
  memories      Memory[]
  userId        String
  user          User              @relation(fields: [userId], references: [id])

  @@map("adventures")
}

model AdventurePlayer {
  id          String    @id @default(uuid())
  adventureId String
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  username    String
  joinedAt    DateTime  @default(now())

  @@map("adventure_players")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Friendship {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  status    FriendshipStatus @default(PENDING)
  userId    String
  friendId  String
  user      User             @relation("FriendRequestsSent", fields: [userId], references: [id])
  friend    User             @relation("FriendRequestsReceived", fields: [friendId], references: [id])

  @@map("friendships")
}

model Wallet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  address   String   @unique
  balance   Float    @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model Memory {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adventureId String
  type        String   // 'SCENE' | 'QUEST' | 'CHARACTER' | 'LOCATION' | 'ITEM'
  title       String
  description String   @db.Text
  metadata    Json?    @default("{}")
  adventure   Adventure @relation(fields: [adventureId], references: [id])

  @@map("memories")
}
